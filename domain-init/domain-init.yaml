apiVersion: v1
kind: ConfigMap
metadata:
  name: domain-init-config
  labels:
    app.kubernetes.io/name: domain-init
data:
  INIT_NGINX_DIR: /usr/share/nginx
  INIT_DOWNLOAD: https://url/download
  INIT_DOMAIN: domain.com
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: domain-init-script
  labels:
    app.kubernetes.io/name: domain-init
data:
  nginx-init.sh: |-
    #!/bin/sh

    cd /domain-init
    
    wget --no-check-certificate -qO domain-init.zip ${INIT_DOWNLOAD}
    unzip -o domain-init.zip
    rm domain-init.zip
    mv domain-init init

    cat <<EOF | tee default.conf
    server {
        listen 80;
        location /init {
            root ${INIT_NGINX_DIR};
            autoindex off;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 65;
        }
        location = /${INIT_DOMAIN} {
            return 302 http://\$host/init/${INIT_DOMAIN}.exe;
        }
    }
    EOF
---
apiVersion: v1
kind: Service
metadata:
  name: domain-init
  labels:
    app.kubernetes.io/name: domain-init
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: domain-init
  ports:
  - name: http
    port: 80
    targetPort: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-init
  labels:
    app.kubernetes.io/name: domain-init
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: domain-init
  template:
    metadata:
      labels:
        app.kubernetes.io/name: domain-init
    spec:
      initContainers:
        - name: initialize
          image: alpine:3.18.5
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/nginx-init.sh"]
          envFrom:
            - configMapRef:
                name: domain-init-config
          volumeMounts:
            - name: script
              mountPath: /usr/local/bin
            - name: init
              mountPath: /domain-init
      containers:
        - name: domain-init
          image: nginx:1.23.4
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          resources: {}
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/default.conf
              name: init
              subPath: default.conf
            - mountPath: /usr/share/nginx/init
              name: init
              subPath: init
      volumes:
        - name: script
          configMap:
            name: domain-init-script
            defaultMode: 110
        - name: init
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: domain-init-ingress
  labels:
    app.kubernetes.io/name: domain-init
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "90"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /init
        pathType: Prefix
        backend:
          service:
            name: domain-init
            port:
              name: http
      - path: /redirect-path
        pathType: Exact
        backend:
          service:
            name: domain-init
            port:
              name: http