apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-admin
  labels:
    app.kubernetes.io/name: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-admin
  labels:
    app.kubernetes.io/name: jenkins
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-admin
  labels:
    app.kubernetes.io/name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-admin
subjects:
- kind: ServiceAccount
  name: jenkins-admin
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  labels:
    app.kubernetes.io/name: jenkins
  annotations:
    argocd.argoproj.io/sync-options: Delete=false
spec:
  storageClassName: openebs-local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app.kubernetes.io/name: jenkins
spec:
  type: ClusterIP
  selector: 
    app.kubernetes.io/name: jenkins
  ports:
  - name: http
    port: 8080
    targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  labels:
    app.kubernetes.io/name: jenkins
spec:
  type: ClusterIP
  selector: 
    app.kubernetes.io/name: jenkins
  ports:
  - name: agent
    port: 50000
    targetPort: 50000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app.kubernetes.io/name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jenkins
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jenkins
    spec:
      securityContext:
        fsGroup: 1000 
        runAsUser: 1000
      serviceAccountName: jenkins-admin
      initContainers:
        - name: init-ca
          image: jenkins/jenkins:2.426.2-lts-jdk17
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
          - update-ca-certificates;
            keytool -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias customCA -file /usr/local/share/ca-certificates/ca.crt;
            cp /etc/ssl/certs/ca-certificates.crt /custom-ca/;
            cp /opt/java/openjdk/lib/security/cacerts /custom-ca/;
            chmod 644 /custom-ca/ca-certificates.crt;
            chmod 644 /custom-ca/cacerts;
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: tls
              mountPath: /usr/local/share/ca-certificates/ca.crt
              subPath: ca.crt
              readOnly: true
            - name: ca
              mountPath: /custom-ca
      containers:
        - name: jenkins
          image: jenkins/jenkins:2.426.2-lts-jdk17
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: >-
                 -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Jakarta
          resources:
            limits:
              cpu: 4000m
              memory: 4Gi
          ports:
            - name: http
              containerPort: 8080
            - name: agent
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - mountPath: /etc/ssl/certs/ca-certificates.crt
              name: ca
              subPath: ca-certificates.crt
            - mountPath: /opt/java/openjdk/lib/security/cacerts
              name: ca
              subPath: cacerts
            - mountPath: /var/jenkins_home
              name: data
      volumes:
        - name: tls
          secret:
            secretName: jenkins-tls
        - name: data
          persistentVolumeClaim:
            claimName: jenkins-pvc
        - name: ca
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  labels:
    app.kubernetes.io/name: jenkins
  annotations:
    cert-manager.io/cluster-issuer: "org-ca-issuer"
    cert-manager.io/common-name: "Jenkins"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: "0"
    nginx.ingress.kubernetes.io/client-body-buffer-size: 128k
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "90"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "false"
    nginx.ingress.kubernetes.io/server-snippet: |
      ssl_session_timeout 1d;
      ignore_invalid_headers off;
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - jenkins.domain.com
      secretName: jenkins-tls
  rules:
  - host: jenkins.domain.com
    http:
      paths:
      - pathType: ImplementationSpecific
        backend:
          service:
            name: jenkins
            port:
              name: http