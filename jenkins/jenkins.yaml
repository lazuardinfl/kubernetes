apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  labels:
    app.kubernetes.io/name: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule-agents
  labels:
    app.kubernetes.io/name: jenkins
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule-agents
  labels:
    app.kubernetes.io/name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  labels:
    app.kubernetes.io/name: jenkins
data:
  nginx-conf: |-
    map_hash_bucket_size 128;
    map $http_bot_hash $auth_status {
        default 0;
        include /etc/nginx/conf.d/allowed-hash.map;
    }
    server {
        listen 80;
        access_log off;
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;
        root /usr/share/nginx;
        location ~ /\. {
            deny all;
        }
        location = /public/config/bot.json {
            if ($auth_status = 0) {
                return 401;
            }
        }
        location /public {
            index index.html;
            autoindex off;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            if ($uri ~* "\.(html)$") {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                expires 0;
            }
        }
    }
  allowed-hash: |-
    sha256-app1 1;
    sha256-app2 1;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  labels:
    app.kubernetes.io/name: jenkins
  annotations:
    argocd.argoproj.io/sync-options: Delete=false
spec:
  storageClassName: openebs-local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app.kubernetes.io/name: jenkins
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: jenkins
  ports:
  - name: http
    port: 8080
    targetPort: http
  - name: static
    port: 80
    targetPort: static
  - name: agent
    port: 50000
    targetPort: agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
    app.kubernetes.io/name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
      app.kubernetes.io/name: jenkins
  template:
    metadata:
      labels:
        app: jenkins
        app.kubernetes.io/name: jenkins
    spec:
      serviceAccountName: jenkins
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: init
          image: jenkins/jenkins:2.426.3-lts-jdk17
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
          - update-ca-certificates;
            keytool -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias customCA -file /usr/local/share/ca-certificates/ca.crt;
            cp /etc/ssl/certs/ca-certificates.crt /custom-ca/;
            cp /opt/java/openjdk/lib/security/cacerts /custom-ca/;
            chmod 644 /custom-ca/ca-certificates.crt;
            chmod 644 /custom-ca/cacerts;
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: private-ca
              mountPath: /usr/local/share/ca-certificates/ca.crt
              subPath: ca.crt
              readOnly: true
            - name: ca
              mountPath: /custom-ca
      containers:
        - name: jenkins
          image: jenkins/jenkins:2.426.3-lts-jdk17
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
            - name: agent
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: ca
              mountPath: /etc/ssl/certs/ca-certificates.crt
              subPath: ca-certificates.crt
            - name: ca
              mountPath: /opt/java/openjdk/lib/security/cacerts
              subPath: cacerts
            - name: data
              mountPath: /var/jenkins_home
          resources: {}
      volumes:
        - name: private-ca
          secret:
            secretName: private-ca
        - name: data
          persistentVolumeClaim:
            claimName: jenkins-pvc
        - name: ca
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-static
  labels:
    app: jenkins-static
    app.kubernetes.io/name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins-static
      app.kubernetes.io/name: jenkins
  template:
    metadata:
      labels:
        app: jenkins-static
        app.kubernetes.io/name: jenkins
    spec:
      containers:
        - name: nginx
          image: nginx:1.23.4
          imagePullPolicy: IfNotPresent
          ports:
            - name: static
              containerPort: 80
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d
            - name: data
              mountPath: /usr/share/nginx/public
              subPath: public
              readOnly: true
          resources: {}
      volumes:
        - name: nginx-conf
          configMap:
            name: jenkins-config
            items:
            - key: nginx-conf
              path: default.conf
            - key: allowed-hash
              path: allowed-hash.map
        - name: data
          persistentVolumeClaim:
            claimName: jenkins-pvc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  labels:
    app.kubernetes.io/name: jenkins
  annotations:
    cert-manager.io/cluster-issuer: "issuer"
    haproxy.org/backend-config-snippet: |
      acl favicon path_beg /favicon.ico
      http-request redirect code 302 prefix /public/page/global/img if favicon
spec:
  ingressClassName: haproxy
  tls:
    - hosts:
        - jenkins.domain.com
      secretName: jenkins-tls
  rules:
  - host: jenkins.domain.com
    http:
      paths:
      - path: /public
        pathType: Prefix
        backend:
          service:
            name: jenkins
            port:
              name: static
      - pathType: ImplementationSpecific
        backend:
          service:
            name: jenkins
            port:
              name: http