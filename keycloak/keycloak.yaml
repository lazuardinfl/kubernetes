apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
data:
  theme.properties: |-
    import=common/keycloak
    locales=en
    welcomeRedirectUrl=${env.WELCOME_REDIRECT}
  index.ftl: |-
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta http-equiv="refresh" content="0; url=${properties.welcomeRedirectUrl}" />
        <meta name="robots" content="noindex, nofollow" />
        <script type="text/javascript">
          window.location.href = '${properties.welcomeRedirectUrl}'
        </script>
      </head>
      <body>
        If login page not shown, follow this <a href="${properties.welcomeRedirectUrl}">link</a>.
      </body>
    </html>
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-secret
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
type: Opaque
data:
  KC_BOOTSTRAP_ADMIN_USERNAME: username
  KC_BOOTSTRAP_ADMIN_PASSWORD: password
  KC_HOSTNAME: keycloak.domain.com
  KC_DB: db_type
  KC_DB_URL_HOST: db_host
  KC_DB_URL_DATABASE: db_name
  KC_DB_URL_PORT: port
  KC_DB_USERNAME: username
  KC_DB_PASSWORD: password
  WELCOME_REDIRECT: https://keycloak.domain.com/realms/org/account
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  selector:
    app: keycloak
    app.kubernetes.io/instance: keycloak
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
    - name: management
      port: 9000
      protocol: TCP
      targetPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-discovery
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: keycloak
    app.kubernetes.io/instance: keycloak
  ports:
    - name: tcp
      port: 7800
      protocol: TCP
      targetPort: 7800
  publishNotReadyAddresses: true
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  replicas: 1
  serviceName: ""
  selector:
    matchLabels:
      app: keycloak
      app.kubernetes.io/instance: keycloak
  template:
    metadata:
      labels:
        app: keycloak
        app.kubernetes.io/instance: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:26.1.5
          args:
            - -Djgroups.dns.query=keycloak-discovery.$(POD_NAMESPACE)
            - --verbose
            - start
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KC_HTTP_PORT
              value: "8080"
            - name: KC_HTTPS_PORT
              value: "8443"
            - name: KC_HTTPS_CERTIFICATE_FILE
              value: /mnt/certificates/tls.crt
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
              value: /mnt/certificates/tls.key
            - name: KC_PROXY_HEADERS
              value: xforwarded
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_CACHE
              value: ispn
            - name: KC_CACHE_STACK
              value: kubernetes
            - name: KC_TRUSTSTORE_PATHS
              value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: KC_TRACING_SERVICE_NAME
              value: keycloak
            - name: KC_TRACING_RESOURCE_ATTRIBUTES
              value: k8s.namespace.name=$(POD_NAMESPACE)
            - name: KC_SPI_THEME_WELCOME_THEME
              value: welcome_redirect
            - name: KC_LOG_CONSOLE_OUTPUT
              value: json
            - name: KC_LOG_CONSOLE_JSON_FORMAT
              value: ecs
          envFrom:
            - secretRef:
                name: keycloak-secret
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 9000
              name: management
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 9000
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 9000
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 600
            httpGet:
              path: /health/started
              port: 9000
              scheme: HTTPS
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2Gi
          volumeMounts:
            - mountPath: /opt/keycloak/conf/truststores/secret-private-ca
              name: truststore-secret-private-ca
            - mountPath: /mnt/certificates
              name: keycloak-tls-certificates
            - mountPath: /opt/keycloak/themes/welcome_redirect/welcome
              name: theme
      volumes:
        - name: truststore-secret-private-ca
          secret:
            defaultMode: 420
            optional: true
            secretName: private-ca
        - name: keycloak-tls-certificates
          secret:
            defaultMode: 420
            secretName: keycloak-tls
        - name: theme
          configMap:
            name: keycloak-config
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak-ingress
  labels:
    app: keycloak
    app.kubernetes.io/instance: keycloak
  annotations:
    cert-manager.io/cluster-issuer: "issuer"
    haproxy.org/server-ssl: "true"
    haproxy.org/check: "false"
spec:
  ingressClassName: haproxy
  tls:
    - hosts:
        - keycloak.domain.com
      secretName: keycloak-tls
  rules:
    - host: keycloak.domain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: keycloak
                port:
                  name: https
