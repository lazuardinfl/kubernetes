apiVersion: v1
kind: ConfigMap
metadata:
  name: public-init-config
  labels:
    app.kubernetes.io/name: public-init
data:
  nginx-init.sh: |-
    #!/bin/bash

    cd /etc/nginx/conf.d
    cat <<EOF | tee default.conf
    server {
        listen 80;
        location /init {
            root ${INIT_NGINX_DIR};
            autoindex on;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 65;
        }
        location = /${INIT_DOMAIN} {
            return 302 http://\$host/init/${INIT_DOMAIN}.exe;
        }
    }
    EOF

    mkdir -p ${INIT_NGINX_DIR}/init
    cd ${INIT_NGINX_DIR}/init
    curl -fsSL -k -o ${INIT_FILE_1} ${INIT_URL}${INIT_FILE_1}
    curl -fsSL -k -o ${INIT_FILE_2} ${INIT_URL}${INIT_FILE_2}
    curl -fsSL -k -o ${INIT_FILE_3} ${INIT_URL}${INIT_FILE_3}
    curl -fsSL -k -o ${INIT_FILE_4} ${INIT_URL}${INIT_FILE_4}

    /etc/init.d/nginx reload
---
apiVersion: v1
kind: Secret
metadata:
  name: public-init-secret
  labels:
    app.kubernetes.io/name: public-init
  annotations:
    avp.kubernetes.io/path: "secret/data/system/public-init"
type: Opaque
data:
  INIT_NGINX_DIR: <nginx_dir | base64encode>
  INIT_DOMAIN: <domain | base64encode>
  INIT_URL: <url | base64encode>
  INIT_FILE_1: <file_1 | base64encode>
  INIT_FILE_2: <file_2 | base64encode>
  INIT_FILE_3: <file_3 | base64encode>
  INIT_FILE_4: <file_4 | base64encode>
---
apiVersion: v1
kind: Service
metadata:
  name: public-init
  labels:
    app.kubernetes.io/name: public-init
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: public-init
  ports:
  - name: http
    port: 80
    targetPort: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: public-init
  labels:
    app.kubernetes.io/name: public-init
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: public-init
  template:
    metadata:
      labels:
        app.kubernetes.io/name: public-init
    spec:
      containers:
        - name: public-init
          image: nginx:1.23.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command: ["/usr/local/sbin/nginx-init.sh"]
          envFrom:
            - secretRef:
                name: public-init-secret
          ports:
            - name: http
              containerPort: 80
          resources: {}
          volumeMounts:
            - name: init
              mountPath: /usr/local/sbin
      volumes:
        - name: init
          configMap:
            name: public-init-config
            defaultMode: 110
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: public-init-ingress
  labels:
    app.kubernetes.io/name: public-init
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "90"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /init
        pathType: Prefix
        backend:
          service:
            name: public-init
            port:
              name: http
      - path: /redirect-path
        pathType: Exact
        backend:
          service:
            name: public-init
            port:
              name: http